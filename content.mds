class: center, middle

# Web development with Python

http://joyouscoding.com/vlerick-flask-course/

---

# Hi!

I'm [Martin](http://joyouscoding.com) - I'm an economist who has been building and helping people build software for the last 15 years.

I'm currently CTO of [Bluesquare](http://bluesquarehub.com) and I'm a frequent teacher at [LeWagon](https://lewagon.com).

I don't think everyone should learn to code but I do think <em>software is/will impact all your careers</em> so knowing something about it is probably a good idea

---

I also speak fast and have quite a bad English accent - enjoy!

So: <em>it's alway ok to ask me to repeat/explain again</em>

---

# Agenda

---

## Monday

1. The Web
2. HTML
3. CSS
4. Bootstrap

---

## Tuesday

1.  Dynamic pages
2.  Model View Controller
3.  A first Flask application
4.  Templates and layout

---

## Wednesday

1.  Parameters and forms
2.  Using libraries
3.  Big recap exercise

---

We'll see where we get, so no worry!
Some insights before betting started

---

Knowing your editor is quite useful - "own your tools"

---

I'll build my examples in very small steps - do the same!

---

My slide have most of the code examples that I type - so use the lecture time to understand, and take the reference when you need it

---

Programming is a craft, not a science - you have to do it to understand it

---

I've been doing that for 20 years and I still google for even simple things. 

Do the same. 

[Stack Overflow is your friend](stackoverflow.com)

---

# The Web, HTML and CSS

---

## The Web


---

### Why and alternatives
  
- Desktop
- Mobile
- -> diffusion via the web is incredible

---

### History and structure

Arpanet: US funded resiliant network

Serie of services running on top of the same interconnected infrastructure (Internet):

- Web: HTTP
- Email: IMAP
- File transfert: FTP

---

### How it works

What happens when you search for "Vlerick" on google?

- Url
- Request 
- Response (example from google search)

---

### Client and server side

- <em>Client</em>: A "browser" is a desktop program used to make requests
- <em>Server</em>: A computer answering requests and returning (typically) HTML pages

---

![](images/static-web.png)

---

![](https://simonswain.com/wdyk/images/html-css-js.png)  

---

## HTML

---

- Define content and structure ("what")
- Use .html extension
- Simplest example

```html
  Hi!
```

---

### Basic structure

```html
  <html>
    <head>
      <title>My first page</title>
    </head>
    <body>
      <h1>Hi!</h1>
      <p>This is my first ever page</p>
    </body>
  </html>
```

---

### Tags

HTML uses <em>tags</em> with always the same structure:

```html
  <h1>Hello</h1>
```

&lt;h1&gt; is the <em>opening</em> tag here

&lt;/h1&gt; is the <em>closing</em> tag here

<em>Hello</em> is the content (what you see on the screen)

---

### Header and Body

```html
  <html>
    <head>
       ... "meta data"
    </head>
    <body>
      ... what is seen on the page
    </body>
  </html>
```

---

### Why a header?

- Page title
- Keywords and description (what Google shows)
- Link to other resources (wait a bit)

---


### Tags (1)

<em>p</em>: paragraph

<em>h1-6</em>: headings

```html
  <h1>Hi!<h1>
  <h2>Welcome on my page</h2>
  <p>Here you'll find a lot of info about what I do</p>
  <p>Such as the courses I teach</p>
```

---

### Tags (2)

<em>em, strong</em>: emphasis, strong 

<em>img</em>: image

<em>a</em>: anchor - a link

```html
  <p>Here you'll find <em>a lot of info</em> about what I do</p>
  <a href="joyouscoding.com">Link to my site</a>
  <img src="https://joyouscoding.com/img/martin.png" alt="Me">
```

Note that:
- img has no closing tag
- you can nest tags

---

### Tags (3)
<em>ul/ol/li</em>: lists

```html
  <ul>
    <li>Ruby</li>
    <li>Intro to the web</li>
    <li>JavaScript</li>
    <li>Live in a startup</li>
  </ul>
```

---
  
### Tags (4)
<em>table</em>: table (with th/tr/td)

```html
<table>
  <thead>
    <th>Course</th><th>ECTS</th>
  </thead>
  <tbody>
    <tr>
      <td>JavaScript</td><td>25</td>
    </tr>
    <tr>
      <td>Ruby</td><td>12</td>
    </tr>
  </tbody>
</table>
```

---
  
### Tags (5)

<em>div<em>: divide your content in sections

---

### Your turn - create your own page

- Try to use a maximum of the tags we've seen...
- Go step by step, reloading/testing along the way

---

### Forms

What we've seen only allow to read data.
To send data, we need forms - fields that allow the user to fill in data

---

### Structure:

```html
<form action="">
  <div><label for="name">Name:</label> <input type="text"></div>
  <div><label for="email">Email:</label> <input type="email"></div>
  <button type="submit">Go</button>
</form>
```

---

### Form tags

Type:
- text
- email
- textarea

---

### Select

```html
<select id="simple" name="simple">
  <option>Banana</option>
  <option>Cherry</option>
  <option>Lemon</option>
</select>
```

---

### Form reference

[Form on MDN](https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/The_native_form_widgets)

---

### Your turn

Add a contact form to your page

---

## CSS

- Define look (color, style, positioning, ...)
- What's a page without CSS?

---

Can be embedded, usually uses a separated file with a ".css" extension

```html
  <head>
    ...
    <link rel="stylesheet" href="style.css" />
  </head>
```

---

### Applying CSS

CSS can be used on:

- All elements with the same tag (ex: all h1)
- A specific element using an id
- A set of elements sharing a class

---

```css
/* Styling all <p> elements */
p {
  font-size: 24px;
}

/* Styling element with id = main */
#main {
  color: brown;
}

/* Styling all elements with class = odd */
.odd {
  background-color: lightgrey;
}
```

---

## CSS Properties

---

### Size and position


```css
  width: 100px;
  heigth: 50px;
```

Can use <em>em</em> or <em>%</em> too.

---

### Color and background color

```css
  color: red;
  background-color: #AABBCC;
```

---

### Font

```css
  font-size: 14;
  font-family: Arial;
  font-variant: small-caps;
  text-decoration: underline;
```

---

### Margins & friends

```css
margin: 10px;
margin: 10px 0px 5px 15px; /* Top, Right, Bottom, Left */
border: 1px solid blue; /* Width, Type, Color */
border-radius: 5px;
```

Space is as important as content for readability

---

### Element Positionning
  
* By default div goes one after the other verticaly.
* Inline vs Box

```css
display: block;
display: inline;
display: none;
```

---

### Position
  
```css
position: relative;
position: absolute;
position: sticky;
```


This is tricky especially in one half day - we're going to cheat a bit

---

### Your turn

Add some style to your profile page

---

## References for CSS

- [CSS on MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/Reference)
- [Positioning](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning)
- [Steal from CodePen](https://codepen.io)
- Look on the web using the inspector

---

## CSS Frameworks

---

What? A set of predefined markup (HTML) and associated CSS classes

---

Why? Crafting CSS by hand is time consuming if you don't know it very well.

Most of us like to use preexisting component and "just" organise them

---

Many options: Bootstrap, Material UI, Semantic UI, Foundation, ...

---

### Bootstrap

- Good list of components
- Sensible defaults
- Easy to organise components in lines/columns
- Well supported and mature

---

### Install

Check at [Get Bootstrap](getbootstrap.com)

```html
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
```

---

### Examples

- Container, text and basic typography
- Tables
- Columns
- Nav
- Forms

---

### Your turn

Improve your page using bootstrap

---

# Python and the Web

---

## Dynamic pages

Difference between:

* [joyouscoding.com](http://joyouscoding.com) - static
* [twitter.com](https://twitter.com) - dynamic

Not everyone sees the same thing

* Time
* Location
* User status

---

## Static and Dynamic pages, cont'

Facebook does not have a singe HTML page on their server for every user - those pages are dynamically generated for you when you visit the site.

The content is typically stored in a database and "injected" in the page.

This is what Flask and Python allows you to do (among many other languages).

---

![Dynamic web](images/dynamic-web.png)

---

We're going to bridge the gap between lask week Python course and yesterday HTML intro, allowing us to use web pages instead of the terminal for input/output

---

## Model - View - Controller (MVC)

Flask is a "MVC" framework.

* Model: your data (often a SQL database)
* Controller: your business logic (python code)
* View: the HTML page (HTML/CSS)

We're not touching DB in this course - you've enough to do already, so we'll fake it with some hard coded data if needed.

---

## Let's create our first Flask site!

Run `pip install flask` to install Flask.
Create a new folder, and a file named "hello.py" with:

```python
from flask import Flask
app = Flask(__name__)


@app.route("/")
def hello():
    return "Hello World!"
```

then just run `FLASK_APP=hello.py flask run` and go to localhost:8000 in your browser

---

## What happened?

* Flask is running a web server on your machine, which answer (by default) to the port 8000
* localhost means your own machine (equivalent: 127.0.0.1)
* The code tells flask to answer "Hello world" if a request arrives on the root page (/)
* Text is a perfectly valid HTML content, so the browser will interpret it properly

---

## Let's look at the code again

```python
# import the Flask library under the name "flask"
from flask import Flask

# create a new application using this file name (hello.py)
app = Flask(__name__)

# call this method if someone goes to the "/" path
@app.route("/")
def hello():
    # returns "Hello World!" as content
    return "Hello World!"
```

---

## This is just Python as you know it

After Flask `@app.route("/")` decorator, the `hello()` function is "just" a Python function.

Anything you've see last week would work there (as long as in the end you can output something as a string).

---

## More routes

We can add more routes and pages to the application:

```python
@app.route("/profile")
def profile():
    return "I'm Martin"
```

---

## Variable routes

Routes can use variable too:

```python
@app.route("/profile/<name>")
def profile(name):
    return "I'm %s" % name
```

In this case the profile function receive the `<name>` part of the url as an argument.

---

## Debug mode

Restarting the server each time is not fun - we can use Flask's debug mode to get "auto reload":

`FLASK_DEBUG=1 FLASK_APP=hello.py flask run`

---

### Your turn (1)

* Create a very first app
* You can use the <> url parameter to get an input
* Pass your name to the url and have it output it
* Take one of last week programs and output the result on the page instead of in the terminal as before

---

## Templates (why)

We could continue that same way and emit proper HTML:

```python
@app.route("/hello/<name>")
def hello(name):
    return """
    <html>
        <head><title>Hello Flask</title></head>
        <body>
          <h1>Hello %s!</h1>
        </body>
    </html>""" % name
```

but this is not really practical.

---

## Templates

```python
# hello.py
@app.route("/betterhello/<name>")
def better_hello(name):
    # Instead of returning a string, we open a template
    # and pass the params
    return render_template('hello.html', name=name)
```

```html
<!DOCTYPE html>
<html>
<head>
    <title>Hello Flask</title>
</head>
<body>
    <h1>Hello {{ name }}!</h1>
</body>
</html>
```

---

## Loops

Repeat a part of the page:

```python
@app.route("/")
def list()
  seq = [1,2,3,4]
  return render_template('list.html', seq=seq)
```

```jinja2
{% for item in seq %}
    {{ item }}
{% endfor %}
```

---

## Alternatives

Show a part of the page depending on a condition:

```jinja2
{% if age >= 18 %}
    You can drink!
{% else %}
    No drinks for you!
{% endif %}
```

---

## MVC

* `hello.py` is the "controller" with the logic
* `hello.html` is the "view" with how it shows on the screen

This is also called "separation of concerns" (logic vs presentation)

---

### Your turn (2)

* Create a new app (repetition helps!)
  * You can use the <> url parameter to get an input
  * Create a new route per exercise
* Pass your name to the url and have it output it

---


* Redo the "Coin flip tosser" exercise (logic should be in python result as HTML)
* Redo the "Rock paper scissors" exercise (pass your choice in the url /play/scissors, and have the program show the computer's choice & result)
* Generally: take some of last week programs and output the result on the page instead of in the terminal as before

---

## Layouts

When you have several pages, some parts are common like a navbar, the html head, etc - we don't want to copy paste it everywhere (why?)

---

```html
<!DOCTYPE html>
<html>
<head>
    <title>Hello Flask</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">Navbar</a>
        ...
  </nav>
  <div class="container">
    <h1>Index</h1>
  </div>
</body>
</html>
```

---

## Layout

We can export all the common part to a common file:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Hello Flask</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">Navbar</a>
        ...
  </nav>
  <div class="container">
    {% block body %} {% endblock %}
  </div>
</body>
</html>
```

---

then use it inside each page:

```html
  {# index.html #}
  {% extends "layout.html" %}
  {% block body %}
    <h1>Index!</h1>
  {% endblock %}
```

```html
  {# home.html #}
  {% extends "layout.html" %}
  {% block body %}
    <h1>Home!</h1>
  {% endblock %}
```

---

## Include

If you have reusable components such as:

* Navbar
* Sidebar
* Footer

That can be done easily with a layout or a simple include statement:

`{% include 'navbar.html' %}`

---

## Your turn (3)

Time to take back some of the exercises and have them look much better

* Add bootstrap CSS
* Use a layout so you don't repeat yourself
* Add a navbar with link to your various examples
* Add a footer with your name

Basically: get from a basic test to something that looks like a website!

---

# Parmeters and forms

---

## Parameters

We've been very limited in our way of input up to know, using only the url. That's of course not the way it works in real life.

---

## Forms

There is two main ways to get parameters in our controller:

* GET: url parameters ("read/search")
* POST: form parameters ("create/update")

Let's see how google.com handle this (open, type vlerick, check url, update in url)

---

## A form

```html
<form method="get" action="/candrink">
  <label for="age">What is your age?</label>
  <input type="text" class="form-control" id="age" name="age" placeholder="Enter your age">
  <button type="submit" class="btn btn-primary">Check!</button>
</form>
```

A form is made of

* one or more `<input>` with names (!)
* one `submit <button>`

---

## GET params

* It will send the user to the url defined in the `action` attribute
* Parameters will be accessible from the python functions

```python
@app.route("/candrink")
def hello():
    age = int(request.args.get('age', ''))
```

`request.args.get` is reading the param with that name. It must match the form input name!

---

### POST params

If we switch the form method to POST, the params won't show in the url. To get them from python:

```python
@app.route("/candrink", methods=['POST'])
def hello():
    age = int(request.form['age'])
    return render_template('candrink.html', age=age)
```

Use `request.form['paramname']` to access POST data

---

## GET vs POST

* GET for search, read
* POST for create, update (actually "PUT")

Or: "do you want this info in the url?"

---

## Your turn (4)

You know have all the blocks to develop pretty much what you want.

* Update your "rock paper scissor" to use a proper form to ask the user what he wants to play
* Create again the "guess a number" application. You'll need the system to remember the hidden number between the request, use a [session](http://flask.pocoo.org/docs/0.12/quickstart/#sessions) for that (start with just a fixed number)

---

## Big recap: Python Recap on the Web

Remember the python recap exercise?
Let's port it on the web!

- Actions becomes links
- Asking question becomes using a form
- Outputs are given using HTML and CSS

---

## References for Flask

* [Flask site](http://flask.pocoo.org/)
* [Flask mega tutorial](https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world)
* [Jinja templates](http://jinja.pocoo.org)
* [Deploying a Flask app on Heroku](https://devcenter.heroku.com/articles/getting-started-with-python#introduction)
* [Python style guide](https://www.python.org/dev/peps/pep-0008/)

---

# For the curious...

---

## Going online

This is just to give you an insight - by running a web server on our own machine, we're just minutes away to deploy it on the internet.

---

Let's try it out!

* Install gunicorn

pip install gunicorn

* Add a Procfile

web: gunicorn hello:app

---

* Add minimal requirements.txt file

Flask==0.12.2
Flask-Cors==3.0.3
gunicorn==19.7.1
Jinja2==2.9.6

* Git commit and launch

---

### Using libraries

* We've been using "libraries": Flask, Jinja, etc.
* `pip` allow you to download and install those
* There are thousands of packages [available](https://pypi.python.org/pypi?%3Aaction=browse)
* Most work today revolve around using libraries
